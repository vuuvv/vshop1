{"attributes": {"packageName": "qx.dev.unit", "type": "mixin", "fullName": "qx.dev.unit.MMock", "name": "MMock"}, "type": "class", "children": [{"attributes": {"text": "<p>Provides test spies, stubs and mocks as well as custom assertions.</p>\n\n<p>Here is a simple example:</p>\n\n<pre class=\"javascript\">\n\n// Test\nqx&#046;Class.define(\"qx.test.Klass\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  include : qx.dev.unit.MMock,\n\n  members :\n  {\n    \"test: doSpecial on condition xyz\": function() {\n      // Set-Up\n      var obj = new qx.Klass();\n\n      // Wraps obj.doSpecial in a spy function and\n      // replaces the original method with this spy.\n      this.spy(obj, \"doSpecial\");\n\n      // Run code that is expected to fulfill condition\n      obj.onCondition(\"xyz\");\n\n      // Assert that spy was called\n      this.assertCalled(obj.doSpecial);\n    },\n\n    tearDown: function() {\n      // Restore all stubs, spies and overridden host objects.\n      //\n      // It is a good idea to always run this in the tearDown()\n      // method, especially when overwriting global or host objects.\n      this.getSandbox().restore();\n    }\n  }\n});\n\n// Implementation\nqx&#046;Class.define(\"qx.Klass\",\n{\n  extend : qx.core.Object,\n\n  members :\n  {\n    onCondition: function(condition) {\n\n      // Complex code determining mustDoSpecial\n      // by examining condition passed\n\n      if (mustDoSpecial) {\n        this.doSpecial();\n      }\n    },\n\n    doSpecial: function() {\n\n    }\n  }\n});\n\n</pre>\n\n<p>This mixin provides assertions such as assertCalled() that work\nwith spies and stubs. Besides offering a compact way to express expectations,\nthose assertions have the advantage that meaningful error messages can be\ngenerated.</p>\n\n<p>For full list of assertions see <a href=\"http://sinonjs.org/docs/api/#assertions\">http://sinonjs.org/docs/api/#assertions</a>.\nNote that sinon.assert.xyz() translates as assertXyz().</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"isCtor": true, "name": "ctor"}, "type": "method"}]}, {"type": "methods", "children": [{"attributes": {"access": "internal", "isInternal": true, "isMixin": true, "name": "__getSinon"}, "type": "method", "children": [{"attributes": {"text": "<p>Get the Sinon.JS object.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "getRequests"}, "type": "method", "children": [{"attributes": {"text": "<p>Get requests made with faked <span class=\"caps\">XHR</span> or server.</p>\n\n<p>Each request can be queried for url, method, requestHeaders,\nstatus and more.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#FakeXMLHttpRequest\">http://sinonjs.org/docs/api/#FakeXMLHttpRequest</a>.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Array of faked requests.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "getSandbox"}, "type": "method", "children": [{"attributes": {"text": "<p>Get sandbox.</p>\n\n<p>The sandbox holds all stubs and mocks. Run this.getSandbox().restore()\nto restore all mock objects.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Sandbox object.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "getServer"}, "type": "method", "children": [{"attributes": {"text": "<p>Get fake server created by {@link #useFakeServer}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Fake server.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "mock"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>The object to create a mock of.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Mocks are slightly different from spies and stubs in that you mock an\nobject, and then set an expectation on one or more of its objects.</p>\n\n<ul>\n<li>var mock = mock(obj)<br />\n  Creates a mock for the provided object. Does not change the object, but<br />\n  returns a mock object to set expectations on the object&#8217;s methods.</li>\n<li>var expectation = mock.expects(&#8220;method&#8221;)<br />\n  Overrides obj.method with a mock function and returns an expectation<br />\n  object. Expectations implement both the spy and stub interface plus<br />\n  the methods described below.</li>\n</ul>\n\n<p>Set expectations with following methods. All methods return the expectation\nitself, meaning expectations can be chained.</p>\n\n<ul>\n<li>expectation.atLeast(number);</li>\n<li>expectation.atMost(number);</li>\n<li>expectation.never();</li>\n<li>expectation.once();</li>\n<li>expectation.twice();</li>\n<li>expectation.thrice();</li>\n<li>expectation.exactly(number);</li>\n<li>expectation.withArgs(arg1, arg2, ...);</li>\n<li>expectation.withExactArgs(arg1, arg2, ...);</li>\n<li>expectation.on(obj);</li>\n<li>expecation.verify();</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#mocks\">http://sinonjs.org/docs/api/#mocks</a>.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>A mock to set expectations on.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Mock"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "spy"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"defaultValue": "null", "name": "function_or_object"}, "type": "param", "children": [{"attributes": {"text": "<p>Spies on the provided function or object.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Function?null"}, "type": "entry"}, {"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p>The method to spy upon if an object was given.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Test spies allow introspection on how a function is used\nthroughout the system under test.</p>\n\n<ul>\n<li>spy()<br />\n  Creates an anonymous function that records arguments,<br />\n  this value, exceptions and return values for all calls.</li>\n</ul>\n\n<ul>\n<li>spy(func)<br />\n  Spies on the provided function</li>\n</ul>\n\n<ul>\n<li>spy(object, &#8220;method&#8221;)<br />\n  Creates a spy for object.method and replaces the original method<br />\n  with the spy. The spy acts exactly like the original method in all cases.<br />\n  The original method can be restored by calling object.method.restore().<br />\n  The returned spy is the function object which replaced the original method.<br />\n  spy === object.method.</li>\n</ul>\n\n<p>A spy has a rich interface to introspect how the wrapped function was used:</p>\n\n<ul>\n<li>spy.callCount</li>\n<li>spy.called</li>\n<li>spy.calledOnce</li>\n<li>spy.calledTwice</li>\n<li>spy.calledThrice</li>\n<li>spy.calledBefore(anotherSpy)</li>\n<li>spy.calledAfter(anotherSpy)</li>\n<li>spy.calledOn(obj)</li>\n<li>spy.alwaysCalledOn(obj)</li>\n<li>spy.calledWith(arg1, arg2, ...)</li>\n<li>spy.alwaysCalledWith(arg1, arg2, ...)</li>\n<li>spy.calledWithExactly(arg1, arg2, ...)</li>\n<li>spy.alwaysCalledWithExactly(arg1, arg2, ...)</li>\n<li>spy.threw()</li>\n<li>spy.threw(&#8220;TypeError&#8221;)</li>\n<li>spy.threw(obj)</li>\n<li>spy.alwaysThrew()</li>\n<li>spy.alwaysThrew(&#8220;TypeError&#8221;)</li>\n<li>spy.alwaysThrew(obj)</li>\n<li>spy.returned(obj)</li>\n<li>spy.alwaysReturned(obj)</li>\n<li>spy.getCall(n);</li>\n<li>spy.thisValues</li>\n<li>spy.args</li>\n<li>spy.exceptions</li>\n<li>spy.returnValues</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#spies\">http://sinonjs.org/docs/api/#spies</a>.</p>\n\n<p>Note: Spies are transparently added to a sandbox. To restore\nthe original function for all spies run this.getSandbox().restore()\nin your tearDown() method.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The wrapped function enhanced with properties and\n        methods that allow for introspection.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Spy"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "stub"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"defaultValue": "null", "name": "object"}, "type": "param", "children": [{"attributes": {"text": "<p>Object to stub. Stubs all methods if no\n        method is given.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p>Replaces object.method with a stub function.\n        An exception is thrown if the property is not already a\n        function, to help avoid typos when stubbing methods.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Test stubs are functions (spies) with pre-programmed behavior.</p>\n\n<ul>\n<li>stub()<br />\n  Creates an anonymous stub function</li>\n<li>stub(object, &#8220;method&#8221;)<br />\n  Replaces object.method with a stub function. The original function<br />\n  can be restored by calling object.method.restore() (or stub.restore()).<br />\n  An exception is thrown if the property is not already a function,<br />\n  to help avoid typos when stubbing methods.</li>\n<li>stub(obj)<br />\n  Stubs all the object&#8217;s methods.</li>\n</ul>\n\n<p>A stub has the interface of a spy in addition to methods that allow to define behaviour:</p>\n\n<ul>\n<li>stub.returns(obj)</li>\n<li>stub.throws()</li>\n<li>stub.throws(&#8220;TypeError&#8221;)</li>\n<li>stub.throws(obj)</li>\n<li>stub.callsArg(index)</li>\n<li>stub.callsArg(0)</li>\n<li>stub.callsArgWith(index, arg1, arg2, ...)</li>\n</ul>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#stubs\">http://sinonjs.org/docs/api/#stubs</a>.</p>\n\n<p>Note: Stubs are transparently added to a sandbox. To restore\nthe original function for all stubs run this.getSandbox().restore()\nin your tearDown() method.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>A stub. Has the interface of a spy in addition to methods\n        that allow to define behaviour.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Stub"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "useFakeServer"}, "type": "method", "children": [{"attributes": {"text": "<p>As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\n<span class=\"caps\">API</span> to setup server responses. To setup responses, use the server\nreturned by {@link #getServer}.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#server\">http://sinonjs.org/docs/api/#server</a>.</p>\n\n<p>Note: The fake server is transparently added to a sandbox. To restore\nthe original host method run this.getSandbox().restore()\nin your tearDown() method.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "Server"}, "type": "entry"}]}]}]}, {"attributes": {"isMixin": true, "name": "useFakeXMLHttpRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Replace the native XMLHttpRequest object in browsers that support it with\na custom implementation which does not send actual requests.</p>\n\n<p>Note: The fake <span class=\"caps\">XHR</span> is transparently added to a sandbox. To restore\nthe original host method run this.getSandbox().restore()\nin your tearDown() method.</p>\n\n<p>See <a href=\"http://sinonjs.org/docs/api/#useFakeXMLHttpRequest\">http://sinonjs.org/docs/api/#useFakeXMLHttpRequest</a>.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "Xhr"}, "type": "entry"}]}]}]}]}]}